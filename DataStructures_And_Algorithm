{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMcNbcxjTBW5L+7fZ0CcJ9O"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "python 구조 (패키지, 함수, 변수)\n",
        "\n"
      ],
      "metadata": {
        "id": "Gz_RgIGw3fRg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Python for Machine Learning\n",
        "| 최성철\n"
      ],
      "metadata": {
        "id": "uOc7ruTC1R03"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 함수 모듈\n",
        "from functools import reduce"
      ],
      "metadata": {
        "id": "6rlnUefAGUdP"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1. Split & Join\n",
        "\n",
        "Split & Join을 이용하여, string값을 list로 변환하고, list값을 string으로 변환하는 코드 작성\n"
      ],
      "metadata": {
        "id": "AJe3tS4n1LB_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# String -> List\n",
        "\n",
        "# 1) 빈칸을 기준으로 문자열 나누기\n",
        "items = 'zero one two three'.split()\n",
        "print(items)\n",
        "\n",
        "# 2) 콤마를 기준으로 나누기\n",
        "examp = 'python, query, java'\n",
        "examp.split(\",\")\n",
        "\n",
        "# 3) unpacking\n",
        "example = 'cs50.gachon.edu'\n",
        "a, b, c = example.split(\".\")\n",
        "\n",
        "print(examp)\n",
        "print(a,b,c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bYFtSKej1Kw7",
        "outputId": "1a531fa2-0a92-4d26-d5d1-2d351c90bbad"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['zero', 'one', 'two', 'three']\n",
            "python, query, java\n",
            "cs50 gachon edu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# List -> String : join\n",
        "\n",
        "# 1) 그냥 연결\n",
        "colors = ['red', 'blue', 'yellow', 'green']\n",
        "result1 = ''.join(colors)\n",
        "  # 빈 공간('')을 colors로 join\n",
        "\n",
        "# 2) 띄어쓰기로 연결\n",
        "result2 = ' '.join(colors)\n",
        "\n",
        "# 3) 콤마로 연결\n",
        "result3 = ','.join(colors)\n",
        "\n",
        "print(result1)\n",
        "print(result2)\n",
        "print(result3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9sun8FTG1w7G",
        "outputId": "ff9ce2c8-ecaa-4053-c596-cbe766d33986"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "redblueyellowgreen\n",
            "red blue yellow green\n",
            "red,blue,yellow,green\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2. List Comprehension\n",
        "한 줄 for문\n",
        "\n",
        "기존 list로 다른 list를 만드는 기법\n",
        "\n",
        "'포괄적인 list' / '포함되는 리스트' 라는 의미로 사용됨\n",
        "\n",
        "파이썬에서 가장 많이 사용되는 기법 중 하나\n",
        "\n",
        "일반적으로 for+append 보다 속도가 빠름\n",
        "\n",
        "\n",
        "- List Comprehension\n",
        "- Nested For Loop\n"
      ],
      "metadata": {
        "id": "DGL1-sHs3ONE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Case1. for + append 쓰기\n",
        "result_for = []\n",
        "for i in range(10):\n",
        "  result_for.append(i)\n",
        "print(result_for)\n",
        "\n",
        "# Case2. List Comprehension\n",
        "result_list = [i for i in range(10)]\n",
        "print(result_list)\n",
        "\n",
        "# Case3. List Comprehension + Filter (조건)\n",
        "result4 = [i for i in range(10) if i %2 == 0]\n",
        "print(result4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bGr-nyEC3HKW",
        "outputId": "6ef028ba-88d2-4615-8b40-e446d7b68e36"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
            "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
            "[0, 2, 4, 6, 8]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# String\n",
        "\n",
        "word_1 = \"Hello\"\n",
        "word_2 = \"World\"\n",
        "result = [i+j for i in word_1 for j in word_2]\n",
        "  # One-dimension(1차원)으로 출력됨\n",
        "  # ['HW', 'Ho', 'Hr', 'Hl', 'Hd', 'eW', 'eo', 'er', 'el', 'ed', 'lW', 'lo', 'lr', 'll', 'ld', 'lW', 'lo', 'lr', 'll', 'ld', 'oW', 'oo', 'or', 'ol', 'od']\n",
        "\n",
        "result_2 = [[i+j] for i in word_1 for j in word_2]\n",
        "  # N-Dimension()\n",
        "  # [i+j]가 한 행을 이루어 하나씩 출력됨\n",
        "\n",
        "result_3 = [[i+j for i in word_1] for j in word_2]\n",
        "  # N-Dimension()\n",
        "  # 하나의 i에 j가 순서대로 와서 붙은게 한 행이 됨\n",
        "  # [['HW', 'eW', 'lW', 'lW', 'oW'], ['Ho', 'eo', 'lo', 'lo', 'oo'], ['Hr', 'er', 'lr', 'lr', 'or'], ['Hl', 'el', 'll', 'll', 'ol'], ['Hd', 'ed', 'ld', 'ld', 'od']]\n",
        "\n",
        "print(result)\n",
        "print(result_2)\n",
        "print(result_3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W8SxUpKJ4jr8",
        "outputId": "6b51133e-5b23-42a4-b7e3-c6ea276872ec"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['HW', 'Ho', 'Hr', 'Hl', 'Hd', 'eW', 'eo', 'er', 'el', 'ed', 'lW', 'lo', 'lr', 'll', 'ld', 'lW', 'lo', 'lr', 'll', 'ld', 'oW', 'oo', 'or', 'ol', 'od']\n",
            "[['HW'], ['Ho'], ['Hr'], ['Hl'], ['Hd'], ['eW'], ['eo'], ['er'], ['el'], ['ed'], ['lW'], ['lo'], ['lr'], ['ll'], ['ld'], ['lW'], ['lo'], ['lr'], ['ll'], ['ld'], ['oW'], ['oo'], ['or'], ['ol'], ['od']]\n",
            "[['HW', 'eW', 'lW', 'lW', 'oW'], ['Ho', 'eo', 'lo', 'lo', 'oo'], ['Hr', 'er', 'lr', 'lr', 'or'], ['Hl', 'el', 'll', 'll', 'ol'], ['Hd', 'ed', 'ld', 'ld', 'od']]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# List Comprehension에서 조건걸기\n",
        "\n",
        "case_1 = [\"A\", \"B\", \"C\"]\n",
        "case_2 = [\"D\", \"E\", \"A\"]\n",
        "result_ex = [i+j for i in case_1 for j in case_2 if not(i==j)]\n",
        "result_ex1 = [i+j for i in case_1 for j in case_2 if i != j]\n",
        "\n",
        "print(result_ex)\n",
        "print(result_ex1)\n",
        "  # not()이랑 != 이랑 결과 똑같이 나옴\n",
        "\n",
        "# list.sort()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PN2MHTm335TI",
        "outputId": "25696585-8994-41cf-dc27-1c2ab5797548"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['AD', 'AE', 'BD', 'BE', 'BA', 'CD', 'CE', 'CA']\n",
            "['AD', 'AE', 'BD', 'BE', 'BA', 'CD', 'CE', 'CA']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Two Demensional List\n",
        "\n",
        "words = \"The Quick brown fox jumps over the lazy dog\".split()\n",
        "stuff = [[w.upper(), w.lower(), len(w)] for w in words]\n",
        "stuff"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7yt2okPY8GZO",
        "outputId": "4fff6aed-3118-4202-b1f0-bae93bfe3baf"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[['THE', 'the', 3],\n",
              " ['QUICK', 'quick', 5],\n",
              " ['BROWN', 'brown', 5],\n",
              " ['FOX', 'fox', 3],\n",
              " ['JUMPS', 'jumps', 5],\n",
              " ['OVER', 'over', 4],\n",
              " ['THE', 'the', 3],\n",
              " ['LAZY', 'lazy', 4],\n",
              " ['DOG', 'dog', 3]]"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3. Enumerate & Zip\n",
        "- Enumerate : 리스트 추출할 때, 인덱스도 같이 추출하는 방법\n",
        "- Zip : 두개 이상의 리스트 값을 병렬적으로 추출하는 방법"
      ],
      "metadata": {
        "id": "gT5htHGU-Fyx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Enumerate : List의 element를 index로 붙여 추출\n",
        "\n",
        "# ex1\n",
        "for i, j in enumerate(['tic', 'tac', 'tok']):\n",
        "  print(i,j)\n",
        "'''\n",
        "0 tic\n",
        "1 tac\n",
        "2 tok\n",
        "'''\n",
        "\n",
        "# ex2\n",
        "ex2_list = [\"a\", \"b\", \"c\", \"d\"]\n",
        "list(enumerate(ex2_list))\n",
        "  # [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')]\n",
        "\n",
        "# ex3. 단어의 위치 추출\n",
        "{i:j for i,j in enumerate('Harvard University is the best college in the world'.split())}\n",
        "  # dictionary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tr8mnYGh8iG7",
        "outputId": "b5d68c61-a3bd-4eb1-ae24-1914a3024c1d"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 tic\n",
            "1 tac\n",
            "2 tok\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{0: 'Harvard',\n",
              " 1: 'University',\n",
              " 2: 'is',\n",
              " 3: 'the',\n",
              " 4: 'best',\n",
              " 5: 'college',\n",
              " 6: 'in',\n",
              " 7: 'the',\n",
              " 8: 'world'}"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Zip : 두 리스트에서 같은 위치에 있는 원소 병렬적으로 추출\n",
        "# 활용사 : 벡터 간 덧셈\n",
        "\n",
        "# ex1\n",
        "a_list = ['a1', 'a2', 'a3']\n",
        "b_list = ['b1', 'b2', 'b3']\n",
        "for a, b in zip(a_list, b_list):\n",
        "  print(a,b)\n",
        "\n",
        "# ex2\n",
        "a, b, c = zip((1,2,3), (10,20,30), (100,200,300))\n",
        "print(a,b,c)\n",
        "\n",
        "# ex3\n",
        "[sum(x) for x in zip((1,2,3), (10,20,30), (100,200,300))]\n",
        "  # 1) zip -> x : (1,10,100) (2,20,200) (3,30,300) 튜플 형식으로 출력\n",
        "  # 2) sum(x) : 위의 튜플들을 각각 sum해줌"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "raVRYKEs-2vW",
        "outputId": "baee480d-68a4-4f2c-afc8-bccdf762ed68"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a1 b1\n",
            "a2 b2\n",
            "a3 b3\n",
            "(1, 10, 100) (2, 20, 200) (3, 30, 300)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[111, 222, 333]"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ex4. enumerate + zip\n",
        "\n",
        "for i, (q,w) in enumerate(zip(a_list, b_list)):\n",
        "  print(i, q, w)\n",
        "  # zip을 이용했기 때문에 q,w는 튜플형식이기 때문에 각각의 변수 q, w에 따로 unpack할 수 없음.\n",
        "  # (q,w)로 unpack해서 같은 튜플 안에 q와 w로 인식되게 하는 방법,\n",
        "  # q 하나의 변수 안에 (a_list, b_list) 튜플이 다 들어가게 하는 방법 으로만 가능함.\n",
        "\n",
        "for i, q in enumerate(zip(a_list, b_list)):\n",
        "  print(i,q)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4SP5UvIv_2aB",
        "outputId": "7fcf1225-0227-4f83-eea6-afb44ea008dc"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 a1 b1\n",
            "1 a2 b2\n",
            "2 a3 b3\n",
            "0 ('a1', 'b1')\n",
            "1 ('a2', 'b2')\n",
            "2 ('a3', 'b3')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 4. Lambda & Map,Reduce\n",
        "- Lambda : 함수처럼 사용가능한 익명함수 (lambda 표현식)\n",
        "- Map,Reduce : Sequence 자료형(리스트, 튜플 등)의 데이터에서 함수를 적용하는 방법\n",
        "\n",
        "사실 list comprehension을 lambda, map보다 권장함."
      ],
      "metadata": {
        "id": "60uw8B9yCsnC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Lambda -- 입력값: 반환되는 값\n",
        "\n",
        "# Case1. General Funcion\n",
        "def f(x,y):\n",
        "  return x+y\n",
        "print(f(1,4))\n",
        "\n",
        "# Case2. Lambda Function\n",
        "f = lambda x, y: x+y\n",
        "print(f(1,4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zTEqyuNkB13l",
        "outputId": "e534f436-d4cd-4ba0-99bc-71d1e097bd3a"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ex\n",
        "f = lambda x: x/2\n",
        "print(f(3))\n",
        "\n",
        "f = lambda x,y: x*y\n",
        "print(f(123,9))"
      ],
      "metadata": {
        "id": "jLJVc19PECcl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Map & Reduce\n",
        "# map() : map(funcion_name, list_data(리스트, 튜플))\n",
        "\n",
        "test = [1,2,3,4,5]\n",
        "f = lambda x: x**2\n",
        "print(list(map(f, test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qfAZMD0gEdvz",
        "outputId": "b859fcd7-8af0-4901-ad07-15f4c80e5230"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16, 25]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# reduce function : list에 똑같은 함수 적용 -- 누적값\n",
        "# reduce() : reduce(funcion_name, list_data(리스트, 튜플))\n",
        "\n",
        "print(reduce(lambda x,y: x+y, [1,2,3,4,5]))\n",
        "  # (((1+2)+3)+4)+5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F6EzbGTwFqCx",
        "outputId": "46215dad-6b1e-4fd3-d02a-eed825b5c3ad"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ex. factorial 함수 구하기\n",
        "\n",
        "def factorial(n):\n",
        "  return reduce(\n",
        "      lambda x,y: x*y, range(1, n+1)\n",
        "  )\n",
        "\n",
        "print(factorial(9))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vYOGLm00GjVT",
        "outputId": "86a06d8f-53b8-4c78-9aa7-0b3999f08692"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "362880\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 5. Asterisk (*)\n",
        "단순 곱셈, 제곱연사, 가변인자 활용 등 여러 부분에서 사용됨\n",
        "\n",
        "- *args : 가변인자, 한 번에 여러개의 변수 넘겨줌\n",
        "\n",
        "- **kargs : 키워드 인자"
      ],
      "metadata": {
        "id": "BIVbL9peHTNK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Asterisk(*)\n",
        "\n",
        "# Case1. *args 가변인자 : 몇 개의 값이 들어올 지 모를 때 askrisk쓰면 좋음; 한 번에 많은 변수 넘겨줄 때\n",
        "def asterisk_test(a,*args):\n",
        " print(a, args)\n",
        " print(type(args))\n",
        "  # 처음에 a가 들어가고 나머지는 *args에 한꺼번에 집어넣음\n",
        "\n",
        "asterisk_test(1,2,3,4,5,6)\n",
        "  # 1 -> a\n",
        "  # 2,3,4,5,6 -> *args\n",
        "\n",
        "# Case2. **kargs : 키워드 인자\n",
        "def asterisk_test(a, **kargs):\n",
        "  print(a, kargs)\n",
        "  print(type(kargs))\n",
        "\n",
        "asterisk_test(1, b=2, c=3, d=4, e=5, f=6)\n",
        "  # b=2, c=3 ... : dict type으로 집어넣음\n",
        "\n",
        "# Case3. Upacking할 때, 튜플/리스트 등 자료형 값을 unpacking\n",
        "# 많은 변수를 나눠서 던져주고 싶을 때\n",
        "def asterisk_test(a, args):\n",
        "  print(a, *args)\n",
        "  print(type(args))\n",
        "    # *(2,3,4,5,6) : unpacking\n",
        "asterisk_test(1, (2,3,4,5,6))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DE_HVyYbHLoR",
        "outputId": "2f727638-e778-4620-f1bb-716856aaf903"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 (2, 3, 4, 5, 6)\n",
            "<class 'tuple'>\n",
            "1 {'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n",
            "<class 'dict'>\n",
            "1 2 3 4 5 6\n",
            "<class 'tuple'>\n",
            "[1, 2] [3, 4] [5, 6]\n",
            "[1, 2] [3, 4] [5, 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Case3. ex1. *data\n",
        "a, b, c = ([1,2], [3,4], [5,6])\n",
        "print(a,b,c)\n",
        "\n",
        "data = ([1,2], [3,4], [5,6])\n",
        "print(*data)\n",
        "\n",
        "# Case3. ex2. **data : dict 타입 뜯어줌\n",
        "def asterisk_test(a,b,c,d):\n",
        "  print(a,b,c,d)\n",
        "data = {\"b\":1, \"c\":2, \"d\":4}\n",
        "asterisk_test(10, **data)\n",
        "  # data의 dict형식을 **data 로 원소 unpack -> 1,2,4 (b에는 1, c에는 2, d에는 4가 들어감)\n",
        "  # 그러니까 asterisk_test(a,b,c,d)의 4개의 변수가 충족됨 (10, 1, 2, 4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sry43LzQIonV",
        "outputId": "0255b49f-d348-4bf9-d645-97656d698022"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2] [3, 4] [5, 6]\n",
            "[1, 2] [3, 4] [5, 6]\n",
            "10 1 2 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for data in zip(*([1,2], [3,4], [5,6])):\n",
        "  print(data)\n",
        "    # (1, 3, 5)\n",
        "    # (2, 4, 6)\n",
        "    # *([1,2], [3,4], [5,6]) : [1,2] [3,4] [5,6] 으로 unpacked\n",
        "    # zip(위 리스트) : (1,3,5) (2,4,6)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "prGN2p7iKsJY",
        "outputId": "f5c524f7-9695-4ca2-c058-7e69da3baee0"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 3, 5)\n",
            "(2, 4, 6)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6. Data Structure - Collections\n",
        "tuple, dict에 대한 확장 데이터 구조 제공\n",
        "\n",
        "- Collections\n",
        "- Data Structure\n",
        "- deque\n",
        "- Counter\n",
        "- orderedDict\n",
        "- defaultdict\n",
        "- namedtuple"
      ],
      "metadata": {
        "id": "sOLRNhd0LxS8"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Y55ZuAyWLNMJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
